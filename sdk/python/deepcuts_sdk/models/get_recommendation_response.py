# coding: utf-8

"""
    Deepcuts API

    An API to access music artist metadata and recommendations.

    The version of the OpenAPI document: v0.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from deepcuts_sdk.models.album import Album
from pydantic import (
    BaseModel,
    Field,
    conlist,
)


class GetRecommendationResponse(BaseModel):
    """
    Schema for a recommendation response.  # noqa: E501
    """

    albums: conlist(Album) = Field(...)
    __properties = ["albums"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetRecommendationResponse:
        """Create an instance of GetRecommendationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in albums (list)
        _items = []
        if self.albums:
            for _item in self.albums:
                if _item:
                    _items.append(_item.to_dict())
            _dict["albums"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetRecommendationResponse:
        """Create an instance of GetRecommendationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetRecommendationResponse.parse_obj(obj)

        _obj = GetRecommendationResponse.parse_obj(
            {
                "albums": [Album.from_dict(_item) for _item in obj.get("albums")]
                if obj.get("albums") is not None
                else None
            }
        )
        return _obj
