# coding: utf-8

"""
    Deepcuts API

    An API to access music artist metadata and recommendations.

    The version of the OpenAPI document: v0.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import (
    BaseModel,
    Field,
    StrictInt,
    StrictStr,
    conlist,
)


class Album(BaseModel):
    """
    Schema for an album.  # noqa: E501
    """

    title: StrictStr = Field(...)
    artist_name: Optional[StrictStr] = None
    spotify_id: Optional[StrictStr] = None
    spotify_url: Optional[StrictStr] = None
    discogs_release_id: Optional[StrictInt] = None
    image_url: Optional[StrictStr] = None
    credit_artist_ids: Optional[conlist(StrictInt)] = None
    __properties = [
        "title",
        "artist_name",
        "spotify_id",
        "spotify_url",
        "discogs_release_id",
        "image_url",
        "credit_artist_ids",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Album:
        """Create an instance of Album from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if artist_name (nullable) is None
        # and __fields_set__ contains the field
        if self.artist_name is None and "artist_name" in self.__fields_set__:
            _dict["artist_name"] = None

        # set to None if spotify_id (nullable) is None
        # and __fields_set__ contains the field
        if self.spotify_id is None and "spotify_id" in self.__fields_set__:
            _dict["spotify_id"] = None

        # set to None if spotify_url (nullable) is None
        # and __fields_set__ contains the field
        if self.spotify_url is None and "spotify_url" in self.__fields_set__:
            _dict["spotify_url"] = None

        # set to None if discogs_release_id (nullable) is None
        # and __fields_set__ contains the field
        if self.discogs_release_id is None and "discogs_release_id" in self.__fields_set__:
            _dict["discogs_release_id"] = None

        # set to None if image_url (nullable) is None
        # and __fields_set__ contains the field
        if self.image_url is None and "image_url" in self.__fields_set__:
            _dict["image_url"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Album:
        """Create an instance of Album from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Album.parse_obj(obj)

        _obj = Album.parse_obj(
            {
                "title": obj.get("title"),
                "artist_name": obj.get("artist_name"),
                "spotify_id": obj.get("spotify_id"),
                "spotify_url": obj.get("spotify_url"),
                "discogs_release_id": obj.get("discogs_release_id"),
                "image_url": obj.get("image_url"),
                "credit_artist_ids": obj.get("credit_artist_ids"),
            }
        )
        return _obj
