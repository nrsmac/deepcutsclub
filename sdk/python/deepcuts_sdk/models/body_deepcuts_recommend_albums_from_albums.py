# coding: utf-8

"""
    Deepcuts API

    An API to access music artist metadata and recommendations.

    The version of the OpenAPI document: v0.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from deepcuts_sdk.models.genre import Genre
from pydantic import (
    BaseModel,
    Field,
    StrictStr,
    conlist,
)


class BodyDeepcutsRecommendAlbumsFromAlbums(BaseModel):
    """
    BodyDeepcutsRecommendAlbumsFromAlbums
    """

    album_titles: Optional[conlist(StrictStr)] = Field(...)
    artist_names: Optional[conlist(StrictStr)] = Field(...)
    genres: Optional[conlist(Genre)] = None
    __properties = ["album_titles", "artist_names", "genres"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BodyDeepcutsRecommendAlbumsFromAlbums:
        """Create an instance of BodyDeepcutsRecommendAlbumsFromAlbums from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if album_titles (nullable) is None
        # and __fields_set__ contains the field
        if self.album_titles is None and "album_titles" in self.__fields_set__:
            _dict["album_titles"] = None

        # set to None if artist_names (nullable) is None
        # and __fields_set__ contains the field
        if self.artist_names is None and "artist_names" in self.__fields_set__:
            _dict["artist_names"] = None

        # set to None if genres (nullable) is None
        # and __fields_set__ contains the field
        if self.genres is None and "genres" in self.__fields_set__:
            _dict["genres"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BodyDeepcutsRecommendAlbumsFromAlbums:
        """Create an instance of BodyDeepcutsRecommendAlbumsFromAlbums from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BodyDeepcutsRecommendAlbumsFromAlbums.parse_obj(obj)

        _obj = BodyDeepcutsRecommendAlbumsFromAlbums.parse_obj(
            {
                "album_titles": obj.get("album_titles"),
                "artist_names": obj.get("artist_names"),
                "genres": obj.get("genres"),
            }
        )
        return _obj
