# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks
repos:
  # - repo: local
  #   hooks:
  #     # Fails if the OpenAPI schema is not up to date. This ensures that developers
  #     # always re-generate and commit the latest openapi.json file before they can pass the build.
  #     - id: generate-and-diff-openapi-schema
  #       name: Generate and Assert that OpenAPI Schema is up to date
  #       entry: >-
  #         python ./scripts/generate-openapi.py generate-and-diff
  #           --existing-spec ./openapi.json
  #           --output-spec ./openapi.json
  #           --fail-on-diff
  #       language: system
  #       # run this hook if openapi.json or any of the src/*.py files change (since those files generate openapi.json)
  #       files: ^openapi\.json$|^src/.*\.py$
  #       pass_filenames: false
  #       always_run: false

  #     # If any FastAPI code has changed, check that it does not introduce any breaking API
  #     # changes compared to the openapi.json on the main branch.
  #     - id: diff-openapi-schema-against-main
  #       name: Catch breaking API schema changes compared to main branch
  #       entry: |
  #         bash -c '
  #         set -ex;

  #         # generate the OpenAPI spec from the latest fastapi app code;
  #         python ./scripts/generate-openapi.py generate --output-spec openapi.json;

  #         # Determine which ref to use: remote if available, otherwise local
  #         if git show refs/heads/main:openapi.json > /dev/null 2>&1; then
  #           OPENAPI_REF="refs/heads/main:openapi.json"
  #         else
  #           OPENAPI_REF="origin/main:openapi.json"
  #         fi

  #         # Load the OpenAPI schema from the determined ref
  #         git show $OPENAPI_REF > ./openapi-main.json

  #         # set the openapi-main.json to be deleted when this hook finishes;
  #         trap "rm openapi-main.json" EXIT;

  #         # compare the recently generated OpenAPI schema to the one in main and fail if ;
  #         # the recently generated one would introduce breaking changes;
  #         docker run --rm \
  #           --volume $PWD:/data \
  #           tufin/oasdiff changelog \
  #             /data/openapi-main.json \
  #             /data/openapi.json \
  #             --fail-on ERR
  #         '
  #       language: system
  #       # run this hook if openapi.json or any of the src/*.py files change (since those files generate openapi.json)
  #       files: ^openapi\.json$|^src/.*\.py$
  #       pass_filenames: false
  #       always_run: false
  #       verbose: true
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      # Fails if there are any ">>>>>" lines in files due to merge conflicts.
      - id: check-merge-conflict
      # Trims trailing whitespace. Allow a single space on the end of .md lines for hard line breaks.
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      # Makes sure files end in a newline and only a newline;
      - id: end-of-file-fixer
        # Attempts to load all TOML files to verify syntax.
        # Exclude files like openapi.json from trailing whitespace checks since it is auto-generated
        exclude: ^openapi\.json$
      - id: check-toml
      # Attempts to load all yaml files to verify syntax; unsafe: only check syntax, do not load yaml
      - id: check-yaml
        args: ["--unsafe"]
      # Check for symlinks that do not point to anything.
      - id: check-symlinks
      # Fail if staged files are above a certain size.
      # To add a large file, use 'git lfs track <file>; git add <file> to track large files with
      # git-lfs rather than commiting them directly to the git history
      - id: check-added-large-files
        args: ["--maxkb=500"]

        # HALT! Before you exclude a large file and commit it, forever
        # bloating our repo size, did you:
        # (1) use a CLI tool like imageoptim to compress them if they are images
        # (2) think hard about whether using DVC or git-lfs is more appropriate
        #     for the file--such as in the case of CSV files or other data
        # This can be confusing. Reach out for help in our chat to help decide
        # how to deal adding these large files you have :)
        exclude: |
          (?x)(
              ^example/large/file.csv|
              ^example/large/sklearn-model.pkl
          )
      # Sort requirements in requirements.txt files.
      - id: requirements-txt-fixer
      # Prevent addition of new git submodules.
      - id: forbid-new-submodules
      # Prevent committing directly to trunk (since Bitbucket wants us to pay for this feature)
      - id: no-commit-to-branch
        args: ["--branch=main"]
      # Detects the presence of private keys
      - id: detect-private-key

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: "v1.2.0"
    hooks:
      - id: mypy
        args:
          [
            --no-strict-optional,
            --ignore-missing-imports,
            --config-file=./pyproject.toml,
          ]

  - repo: https://github.com/psf/black
    rev: 23.1.0
    hooks:
      - id: black
        args:
          - --config=./pyproject.toml

  - repo: https://github.com/PyCQA/pylint
    rev: v2.16.3
    hooks:
      - id: pylint
        args:
          - --rcfile=./pyproject.toml

  - repo: https://github.com/PyCQA/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        args:
          - --toml-config=./pyproject.toml
        additional_dependencies:
          - radon
          - flake8-docstrings
          - Flake8-pyproject

  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args:
          - --settings-path=./pyproject.toml

  - repo: https://github.com/PyCQA/autoflake
    rev: v2.0.1
    hooks:
      - id: autoflake
        args:
          - --in-place
          - --remove-all-unused-imports
          - --remove-unused-variable
          - --ignore-init-module-imports
